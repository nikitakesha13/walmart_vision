from misc import Misc
# All analysis is being done from a side view
# (0,0) is top left corner

misc = Misc()

class Analysis:
# OSHA Training: Keep your back straight while lifting
    def check_spine(self, frames, tolerance):
        spine_status = []
        prev_spine = -1
        spine_length = -1
        for frame in frames:
            # Error Checking
            if frame["Rhip"] == None or \
            frame["Lhip"] == None or \
            frame["neck"] == None:
                spine_status.append([])
                continue

            spine_length = misc.get_spine_length(frame)

            # Results are inconclusive
            if (prev_spine == -1):
                prev_spine = spine_length
                spine_status.append([])
                continue
            
            # Results are positive
            if (spine_length - prev_spine < tolerance):
                spine_status.append([])

            # Results are negative
            else:
                tailbone = (int((frame["Lhip"][0] + frame["Rhip"][0]) / 2), int((frame["Lhip"][1] + frame["Rhip"][1]) / 2))
                spine_status.append([tailbone, frame["neck"]])
            
            prev_spine = spine_length

        return spine_status

    # OSHA Training: Do not overextend the spine backwards
    def check_lean(self, frame, tolerance):
        # Error Checking
        if frame["Rshoulder"] == None or \
        frame["Rhip"] == None or \
        frame["Lshoulder"] == None or \
        frame["Lhip"] == None or \
        frame["neck"] == None or \
        frame["nose"] == None:
            return []

        facing = misc.get_direction(frame)

        if facing == "R":
            if frame["Rshoulder"][0] - frame["Rhip"][0] > tolerance:
                return [frame["Rshoulder"], frame["Rhip"]]
            else:
                return []

        if facing == "L":
            if frame["Lshoulder"][0] - frame["Lhip"][0] > tolerance:
                return [frame["Lshoulder"], frame["Lhip"]]
            else:
                return []

    # OSHA Training: Do not bend forward, instead squat down to an object
    def check_knees(self, frames, tolerance):
        knee_status = []
        knee = -1
        shoulder = -1
        prev_shoulder = -1
        for frame in frames:
            # Error Checking
            if frame["Lknee"] == None or \
            frame["Lshoulder"] == None or \
            frame["Lhip"] == None or \
            frame["Rknee"] == None or \
            frame["Rshoulder"] == None or \
            frame["Rhip"] == None or \
            frame["nose"] == None or \
            frame["neck"] == None:
                knee_status.append([])
                continue

            direction = misc.get_direction(frame)
            
            if direction == "L":
                knee = frame["Lknee"]
                shoulder = frame["Lshoulder"]
            elif direction == "R":
                knee = frame["Rknee"]
                shoulder = frame["Rshoulder"]
            else:
                knee_status.append([])
                continue
            
            if prev_shoulder == -1 or prev_knee == -1:
                prev_shoulder = shoulder
                prev_knee = knee
                knee_status.append([])
                continue
                

            # Check if shoulder is moving down
            if prev_shoulder[1] < shoulder[1]:
                if direction == "R" and knee[0] - prev_knee[0] < tolerance:
                    knee_status.append([])
                elif direction == "L" and prev_knee[0] - knee[0] < tolerance:
                    knee_status.append([])
                else:
                    if direction == "R":
                        hip = frame["Rhip"]
                    else:
                        hip = frame["Lhip"]

                    knee_status.append([knee, hip])
            else:
                knee_status.append([])

        return knee_status

# OSHA Taining Check: Should not lift an object above shoulder level
    def check_elbows(self, frame):
        # Error Checking
        if frame["Relbow"] == None or \
        frame["Rshoulder"] == None or \
        frame["Lelbow"] == None or \
        frame["Lshoulder"] == None:
            return []

        if frame["Relbow"][1] < frame["Rshoulder"][1]:
            return [frame["Relbow"], frame["Rshoulder"]]
        if frame["Lelbow"][1] < frame["Lshoulder"][1]:
            return [frame["Lelbow"], frame["Lshoulder"]]
        return []

    def analysis(self,frames):
        # Individual frame checks
        elbow_height_frames = []
        back_lean_frames = []
        for frame in frames:
            elbow_height_frames.append(self.check_elbows(frame))
            back_lean_frames.append(self.check_lean(frame, 50))

        # Multiple frame checks
        spine_length_frames = self.check_spine(frames, 20)
        knees_bent_frames = self.check_knees(frames, 60)

        # Creare analysis output
        # for x in range(len(elbow_height_frames)):
        #     frame = ""
        #     num_bad = 0
        #     if spine_length_frames[x][0:3] == "Bad":
        #         frame += spine_length_frames[x][6:]
        #         num_bad += 1
        #     if back_lean_frames[x][0:3] == "Bad":
        #         frame += back_lean_frames[x][6:]
        #         num_bad += 1
        #     if knees_bent_frames[x][0:3] == "Bad":
        #         frame += knees_bent_frames[x][6:]
        #         num_bad += 1
        #     if elbow_height_frames[x][0:3] == "Bad":
        #         frame+= elbow_height_frames[x][6:]
        #         num_bad += 1
        #     frame += "\n"

        return [elbow_height_frames, back_lean_frames, spine_length_frames, knees_bent_frames]


# Testing
input = [[(584, 31), (640, 78), (640, 78), None, (667, 78), (667, 172), (612, 281), (584, 391), (640, 281), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (667, 172), (612, 266), (584, 391), (640, 281), (640, 422)], [(556, 31), (640, 93), (612, 93), None, (640, 78), (667, 172), (612, 281), (584, 391), (640, 281), (640, 422)], [(556, 46), (640, 93), (612, 93), None, (640, 78), (667, 172), (612, 281), (584, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 93), (667, 172), (612, 281), (612, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 93), (667, 187), (612, 281), (584, 391), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 93), (667, 172), (612, 281), (584, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 78), (667, 172), (612, 281), (584, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 78), (640, 172), (612, 266), (584, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 78), (640, 187), (612, 281), (584, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 78), (640, 187), (612, 281), (584, 406), (640, 281), (640, 438)], [(556, 46), (640, 93), (612, 93), None, (640, 93), (640, 187), (612, 281), (584, 391), (640, 281), (640, 438)], [(556, 46), (612, 93), (612, 78), None, (640, 78), (640, 172), (612, 281), (584, 406), (640, 281), (640, 438)], [(528, 46), (612, 93), (612, 93), None, (612, 93), (640, 172), (640, 281), (584, 406), (640, 281), (640, 438)], [(528, 62), (612, 93), (612, 78), None, (612, 78), (640, 172), (640, 281), (612, 422), (640, 281), (640, 438)], [(528, 62), (612, 93), (612, 78), None, (612, 78), (640, 156), (640, 281), (640, 438), (640, 281), (640, 438)], [(528, 62), (612, 93), (612, 93), None, (612, 93), (640, 172), (640, 281), (612, 422), (640, 281), (640, 438)], [(528, 62), (612, 93), (612, 93), None, (612, 93), (612, 187), (640, 281), (584, 406), (640, 281), (640, 438)], [(528, 62), (612, 93), (612, 93), None, (612, 93), (612, 187), (640, 281), (612, 422), (640, 281), (640, 438)], [(528, 78), (612, 93), (584, 93), None, (612, 93), (612, 203), (640, 281), (584, 406), (640, 266), (640, 453)], [(500, 78), (584, 109), (584, 109), None, (612, 109), (612, 203), (640, 281), (584, 406), (640, 281), (640, 438)], [(500, 93), (584, 109), (584, 109), None, (584, 109), (612, 219), (640, 281), (584, 406), (667, 281), (640, 438)], [(500, 93), (584, 125), (584, 125), None, (584, 109), (584, 219), (640, 281), (584, 406), (667, 281), (640, 438)], [(500, 109), (584, 125), (584, 125), None, (584, 125), (584, 234), (640, 281), (584, 422), (667, 281), (640, 438)], [(500, 109), (584, 125), (584, 125), None, (584, 125), (584, 234), (640, 297), (584, 422), (667, 297), (640, 438)], [(500, 125), (584, 140), (584, 140), None, (584, 140), (584, 250), (640, 297), (584, 438), (667, 297), (640, 438)], [(500, 140), (584, 156), (584, 140), None, (584, 156), (584, 250), (640, 297), (584, 438), (695, 297), (640, 438)], [(500, 140), (584, 156), (584, 156), (584, 266), (584, 156), (584, 250), (640, 297), (584, 438), (695, 297), (640, 438)], [(500, 156), (584, 156), (584, 156), None, (584, 172), (556, 266), (640, 297), (584, 438), (695, 297), (640, 438)], [(500, 172), (584, 172), (584, 172), None, (584, 172), (556, 266), (640, 313), (584, 438), (695, 313), (612, 453)], [(473, 187), (584, 187), (584, 187), None, (556, 187), (556, 281), (667, 313), (584, 438), (695, 313), (612, 453)], [(473, 187), (584, 203), (556, 203), None, (556, 203), (556, 313), (640, 313), (584, 453), (695, 313), (612, 453)], [(500, 203), (584, 203), (584, 203), None, (556, 203), (556, 313), (667, 328), (584, 438), (695, 328), (612, 453)], [(500, 219), (584, 219), (584, 219), None, (556, 203), (556, 328), (667, 328), (584, 438), (695, 328), (612, 453)], [(500, 234), (584, 234), (556, 234), None, (556, 219), (556, 344), (667, 344), (584, 438), (723, 328), (612, 453)], [(500, 250), (556, 234), (556, 234), None, (556, 219), (556, 344), (667, 344), (584, 453), (695, 344), (612, 453)], [(500, 266), (584, 234), (556, 250), None, (556, 234), (556, 360), (667, 344), (584, 453), (695, 344), (612, 453)], [(500, 266), (584, 250), (556, 250), None, (556, 234), (556, 360), (667, 360), (584, 453), (695, 360), (612, 453)], [(500, 266), (584, 250), (584, 250), None, (556, 250), (556, 375), (667, 360), (584, 469), (695, 360), (584, 453)], [(500, 281), (584, 266), (556, 281), None, (556, 250), (556, 375), (667, 360), (584, 453), (695, 360), (584, 453)], [(500, 281), (584, 266), (584, 266), None, (556, 266), (556, 375), (667, 375), (584, 469), (695, 375), (584, 469)], [(500, 297), (584, 266), (584, 266), None, (556, 266), (556, 391), (667, 375), (584, 469), (695, 375), (584, 469)], [(500, 297), (584, 266), (584, 281), None, (556, 266), (556, 391), (667, 375), (584, 469), (695, 375), (584, 469)], [(473, 297), (584, 266), (584, 281), None, (556, 266), (556, 406), (667, 375), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 281), (584, 281), None, (556, 266), (556, 406), (667, 375), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), (584, 391), (556, 281), (556, 406), (695, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), (584, 391), (556, 281), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), None, (556, 281), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (556, 281), (584, 281), None, (556, 281), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), (584, 406), (556, 281), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), None, (556, 281), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), None, (556, 281), (556, 406), (695, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), None, (556, 281), (556, 406), (695, 391), (584, 469), (695, 391), (584, 469)], [(500, 313), (584, 281), (584, 281), (584, 406), (556, 281), (556, 406), (695, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 281), (584, 281), (584, 391), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 281), (584, 281), (584, 391), (556, 281), (528, 406), (695, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 281), (584, 281), (584, 391), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 281), (584, 266), (584, 391), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 281), (584, 281), (584, 391), (556, 266), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (584, 266), (584, 266), (584, 391), (556, 266), (556, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 281), (584, 266), (584, 266), None, (584, 266), (556, 391), (667, 375), (584, 469), (695, 391), (584, 469)], [(500, 281), (584, 266), (584, 266), None, (556, 266), (556, 391), (667, 375), (584, 469), (695, 391), (584, 469)], [(500, 281), (584, 266), (584, 266), None, (556, 266), (556, 391), (667, 375), (584, 469), (695, 391), (584, 469)], [(500, 266), (584, 266), (584, 266), None, (556, 250), (556, 391), (667, 375), (584, 469), (695, 375), (584, 469)], [(500, 266), (584, 250), (556, 266), (584, 360), (556, 250), (556, 375), (667, 375), (584, 469), (695, 375), (584, 469)], [(500, 266), (584, 250), (584, 250), None, (556, 250), (556, 360), (667, 375), (584, 469), (695, 375), (584, 469)], [(500, 250), (584, 234), (584, 234), (584, 344), (584, 234), (556, 344), (667, 360), (584, 469), (695, 360), (584, 453)], [(500, 234), (584, 234), (584, 234), (584, 344), (584, 219), (556, 328), (667, 360), (584, 453), (695, 360), (584, 453)], [(473, 219), (584, 219), (584, 219), (584, 328), (556, 219), (556, 313), (667, 344), (612, 469), (695, 344), (584, 453)], [(473, 203), (584, 203), (584, 203), (584, 328), (556, 203), (556, 313), (667, 344), (612, 469), (695, 344), (584, 453)], [(473, 203), (584, 203), (584, 187), (584, 313), (556, 203), (556, 297), (667, 328), (612, 469), (695, 328), (584, 453)], [(473, 187), (584, 187), (584, 187), (584, 297), (584, 187), (556, 297), (667, 328), (612, 453), (695, 328), (584, 453)], [(473, 187), (584, 187), (584, 187), (584, 297), (584, 187), (556, 297), (667, 328), (612, 453), (695, 328), (584, 453)], [(473, 172), (584, 172), (584, 172), (584, 281), (584, 172), (556, 281), (640, 328), (612, 453), (667, 328), (584, 453)], [(500, 140), (584, 156), (584, 156), (584, 281), (584, 156), (556, 266), (640, 313), (612, 453), (667, 313), (584, 453)], [(500, 125), (584, 140), (584, 140), (584, 266), (584, 140), (556, 250), (667, 313), (612, 453), (667, 313), (612, 453)], [(500, 125), (584, 140), (584, 140), (584, 266), (584, 140), (556, 250), (640, 297), (584, 453), (667, 297), (612, 453)], [(500, 109), (584, 125), (584, 125), (612, 250), (584, 125), (556, 234), (640, 297), (584, 453), (667, 297), (612, 453)], [(500, 78), (584, 109), (584, 109), None, (584, 109), (584, 219), (640, 281), (584, 453), (640, 281), (612, 453)], [(500, 78), (612, 109), (612, 109), None, (612, 93), (584, 203), (640, 281), (612, 438), (640, 281), (612, 453)], [(528, 62), (612, 93), (612, 93), None, (612, 93), (584, 187), (640, 281), (584, 453), (640, 281), (612, 453)], [(528, 62), (612, 93), (612, 93), None, (612, 93), (584, 187), (640, 281), (584, 453), (640, 281), (612, 453)], [(500, 46), (612, 93), (612, 93), None, (612, 93), (584, 187), (640, 281), (584, 438), (640, 281), (612, 453)], [(528, 46), (612, 78), (612, 78), None, (612, 78), (584, 172), (640, 281), (584, 438), (640, 281), (612, 453)], [(528, 46), (612, 78), (612, 78), None, (612, 78), (612, 172), (640, 266), (584, 438), (640, 281), (612, 438)], [(528, 31), (612, 78), (612, 78), None, (612, 78), (612, 172), (612, 281), (584, 438), (612, 281), (612, 438)], [(556, 31), (640, 78), (640, 78), None, (612, 78), (612, 172), (612, 266), (612, 438), (612, 266), (640, 438)], [(528, 31), (612, 78), (612, 78), None, (640, 78), (612, 172), (640, 266), (612, 422), (612, 266), (640, 438)], [(556, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (612, 406), (612, 266), (640, 438)], [(556, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (640, 266), (612, 391), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (667, 78), None, (640, 78), (612, 172), (612, 266), (640, 406), (612, 266), (640, 406)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 422), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (640, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 422), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 422), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 422), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (640, 172), (612, 266), (640, 422), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (612, 406), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 422), (612, 266), (640, 422)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 422), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (612, 406), (612, 266), (640, 438)], [(584, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 422), (612, 266), (640, 438)], [(556, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 422), (612, 266), (640, 438)], [(556, 46), (640, 78), (640, 78), None, (640, 78), (612, 172), (640, 266), (640, 422), (612, 266), (640, 438)], [(556, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (640, 266), (640, 406), (612, 266), (640, 422)], [(556, 31), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (640, 406), (612, 266), (640, 422)], [(556, 46), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (612, 406), (612, 266), (640, 438)], [(556, 46), (640, 78), (640, 78), None, (640, 78), (612, 172), (612, 266), (612, 406), (612, 266), (640, 438)], [(556, 46), (640, 78), (640, 78), None, (612, 78), (612, 172), (640, 266), (584, 406), (612, 266), (640, 438)], [(528, 46), (640, 78), (640, 78), None, (612, 78), (612, 172), (640, 266), (612, 422), (640, 281), (640, 438)], [(528, 46), (612, 78), (612, 78), None, (612, 78), (612, 172), (612, 281), (612, 422), (640, 281), (612, 438)], [(528, 46), (612, 78), (612, 78), None, (612, 78), (584, 187), (612, 281), (612, 438), (640, 281), (612, 438)], [(528, 46), (612, 93), (612, 93), None, (612, 78), (584, 172), (612, 281), (612, 438), (640, 281), (612, 438)], [(528, 62), (612, 93), (584, 93), None, (612, 93), (584, 187), (612, 281), (584, 453), (640, 281), (612, 453)], [(528, 62), (612, 93), (612, 93), None, (612, 93), (584, 187), (640, 281), (584, 453), (640, 281), (612, 453)], [(528, 78), (612, 93), (612, 93), None, (612, 93), (584, 203), (612, 281), (584, 453), (640, 281), (612, 438)], [(500, 78), (612, 109), (612, 109), (612, 234), (584, 109), (584, 219), (640, 281), (612, 453), (667, 281), (612, 453)], [(500, 93), (584, 109), (584, 109), (584, 250), (584, 109), (556, 219), (640, 297), (612, 453), (667, 297), (612, 453)], [(500, 109), (584, 125), (584, 125), (584, 250), (584, 125), (556, 234), (667, 297), (612, 453), (667, 297), (612, 453)], [(500, 109), (584, 125), (584, 125), (584, 250), (584, 125), (556, 234), (640, 297), (612, 469), (667, 297), (612, 453)], [(500, 125), (584, 140), (584, 140), (584, 250), (584, 140), (556, 250), (667, 297), (612, 453), (667, 297), (612, 453)], [(500, 125), (584, 156), (584, 156), (584, 266), (584, 156), (556, 250), (667, 313), (584, 453), (667, 313), (612, 453)], [(500, 156), (584, 156), (584, 156), (584, 281), (584, 156), (556, 266), (667, 313), (584, 469), (695, 313), (612, 453)], [(500, 156), (584, 172), (584, 172), (584, 281), (584, 172), (556, 266), (640, 313), (584, 469), (695, 313), (612, 453)], [(473, 172), (556, 187), (556, 187), (584, 297), (556, 187), (556, 281), (640, 328), (584, 453), (695, 328), (612, 453)], [(500, 203), (584, 203), (584, 203), (584, 297), (556, 203), (556, 297), (667, 328), (584, 453), (695, 328), (612, 453)], [(473, 203), (584, 203), (584, 219), (556, 313), (556, 203), (556, 297), (667, 344), (584, 438), (695, 344), (612, 453)], [(473, 219), (556, 219), (556, 234), (556, 328), (556, 219), (556, 313), (667, 344), (584, 453), (695, 344), (584, 453)], [(473, 234), (584, 234), (584, 234), (584, 328), (556, 219), (556, 328), (667, 344), (584, 453), (695, 344), (584, 453)], [(473, 234), (584, 234), (584, 234), None, (556, 219), (556, 328), (667, 344), (584, 453), (695, 344), (584, 453)], [(473, 250), (556, 250), (556, 250), (556, 360), (556, 234), (556, 344), (667, 360), (584, 453), (695, 360), (584, 469)], [(473, 266), (556, 250), (556, 266), (556, 360), (556, 250), (528, 360), (667, 360), (584, 469), (695, 360), (584, 469)], [(473, 266), (584, 250), (584, 250), (556, 360), (556, 250), (528, 375), (667, 375), (584, 469), (695, 375), (584, 469)], [(473, 281), (584, 266), (584, 266), (556, 375), (556, 266), (528, 375), (667, 375), (584, 469), (695, 375), (584, 469)], [(473, 281), (556, 266), (556, 266), (556, 375), (556, 266), (528, 375), (667, 375), (584, 469), (695, 375), (584, 469)], [(473, 281), (556, 266), (556, 281), (556, 375), (556, 266), (528, 375), (667, 375), (584, 485), (695, 375), (584, 469)], [(473, 281), (556, 281), (556, 266), (556, 375), (556, 281), (528, 391), (667, 391), (584, 485), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 266), (584, 375), (556, 281), (528, 391), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 375), (556, 281), (528, 391), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 375), (556, 281), (528, 391), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 375), (556, 281), (528, 391), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 391), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 406), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 406), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 406), (556, 297), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 422), (556, 297), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 406), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 422), (556, 281), (528, 422), (667, 391), (584, 469), (695, 391), (584, 469)], [(473, 297), (556, 281), (556, 281), (556, 406), (556, 281), (528, 406), (667, 391), (584, 469), (695, 391), (584, 469)]]

obj = Analysis()
matrix = obj.analysis(misc.create_dicts(input))
for arr in matrix:
    for i in range(len(arr[32]) - 1):
        print ("P1: ", arr[32][i][0], "-", arr[32][i][1])
        print ("P2: ", arr[32][i+1][0], "-", arr[32][i+1][1])
